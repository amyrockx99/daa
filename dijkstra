import java.util.Scanner; 
public class dijkstra 
{ 
int cost[][] = new int[10][10];
 int dist[]= new int[100];
 void dij(int n,int v)
 {
 int i,u,count,w,min;
 u=0;
 int flag[]= new int[10];
 for(i=1;i<=n;i++) 
{ 
flag[i]=0; 
dist[i]=cost[v][i]; 
} 
count=2; 
 
while(count<=n)
 {
 min=99; 
for(w=1;w<=n;w++) 
if(dist[w]<min && flag[w]==0)
 {
 min=dist[w]; 
u=w; 
flag[u]=1;
 }
 count++; 
for(w=1;w<=n;w++) 
if((dist[u]+cost[u][w]<dist[w]) && flag[w]==0) dist[w]=dist[u]+cost[u][w];
 }
 
}
 public static void main(String args[])
 {
 int n,v,i,j; 
dijkstra g= new dijkstra();
 Scanner in= new Scanner(System.in);
 System.out.println(" Enter the number of nodes:"); 
n= in.nextInt(); 
System.out.println(" Enter the cost matrix:"); 
for(i=1;i<=n;i++) 
for(j=1;j<=n;j++) 
{
 g.cost[i][j]=in.nextInt();
 if(g.cost[i][j]==0) g.cost[i][j]=999;
 }
 System.out.println(" Enter the source matrix:");
 v=in.nextInt();
 g.dij(n,v); 
System.out.println(" Shortest path:"); 
for(i=1;i<=n;i++) 
if(i!=v)
 System.out.println(v + "->" + i + "\t" + "cost="+ g.dist[i]+ "\n");
 }
 }
