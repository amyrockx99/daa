import java.util.Scanner; 
class msort { 
long a[];
     void merge(long a[],int low,int mid,int high)
     {
     int i,j,k;
     long b[]= new long[10000]; 
    i=low;   
  j=mid+1; 
 
    k=low;  
   while((i<=mid) && (j<=high))
     { 
    if(a[i]<a[j])
     {   
  b[k]=a[i];
     k=k+1;  
   i=i+1;   
  }
     else
     {   
  b[k]=a[j];   
  k=k+1; 
    j=j+1;   
  }  
   }    
 while(i<=mid)   
  {    
 b[k]=a[i];  
   k=k+1;   
  i=i+1;     
}     
while(j<=high) 
    {    
 b[k]=a[j]; 
k=k+1;
 j=j+1;
     }
     for(i=low;i<=k-1;i++)  
   a[i]=b[i];
     } 
    void mergesort(long a[],int low,int high)
     { 
    int mid;
     if(low<high)   
  {     
mid=(low+high)/2;  
   mergesort(a,low,mid);    
 mergesort(a,mid+1,high);   
  merge(a,low,mid,high);    
 } 
    } 
public static void main(String args[])
 { 
    msort sorter=new msort();     
System.out.println("\n Enter the number of elements : ");    
 Scanner in=new Scanner(System.in);  
   int n=in.nextInt();    
 long [] input = new long [n];     
for(int i=0;i<n;i++)   
  {     
input[i]= (long) Math.round(Math.random() * 5000);
 
    } 
    long startime=System.currentTimeMillis(); 
    sorter.mergesort(input,0,n-1); 
    long endtime= System.currentTimeMillis();  
   long totaltime= endtime-startime; 
    for(int j=0;j<n;j++)  
   System.out.println(input[j]);  
   System.out.println("Total time required for execution=" + totaltime +"ms");
    System.out.println("the best case and average case and worst time complexity= " +n*Math.log(n));     
} 
} 
